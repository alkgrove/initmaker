;
; Config Sample for initmaker
; clocking
; 
; Clocking is clock source, phase lock loop (DPLL and DFLL)
; and generic clock drivers (GCLK). Clock sources can be 
; internal or external sources which provide reference for DPLL
; or DFLL or drive GCLK directly. The output of the phase lock 
; loop drive the GCLK units which provde references for the
; CPU and peripherals. 
; The chip defaults to ultra low power 32KHz internal oscillator
; to 48MHz DFLL to GCLK0 to the CPU. 
; The main clock module (MCLK) controls the clocks between the 
; CPU and the synchronizing registers of the peripherals on 
; the CPU side APBx and AHBx. 
; The Flash memory is synchronous with the CPU but can have 
; control over wait states. 
; The NVMCTRL and MCLK should be initialized minimally with:
[NVMCTRL]
wait_states = 0
[MCLK]
div = 1

; clock sources
; RTC external clock
; if the microcontroller has a low frequency 32.768KHz crystal
; for the real time clock on XIN32 and XOUT32 then enable it with
; provide the external frequency of the crystal in hertz
; and enable either 32K out (en32k) or 1K out (en1k). 1K is 1024Hz
; If you do not have a low frequency crystal on the MCU, 
; do not use this section. 
[XOSC32K]
ext_frequency = 32768
en32K = 1

; the SAMD51 has an internal low frequency (32.768KHz) 
; oscillator. It has no properties but if the section is defined
; will  generates code to copy the factory calibration values to the 
; calibration registers. OSCULP32K is enabled by default. 
[OSCULP32K]

; external clock source
; the XOSCn section can enable one of the 8MHz to 48MHz
; external crystal oscillators. A crystal and load capacitors 
; must be on the XINn and XOUTn pins of the microcontroller
; to use XOSCn. XOSC must have the crystal frequency defined
; for the ext_frequency property. It can optionally have the
; power control run in standby (runstby) and on demand 
; (ondemand) properties.
[XOSC0]
ext_frequency = 12000000

; external clock 
; external clocks are brought as an input to a GCLK and 
; can be routed to a peripheral or to a phase lock loop.
; the external clock pin input must match the GCLK you are
; using.
[GCLK3]
ext_frequency = 8000000
in = CLKIN
div = 1

; digital phase lock loops
; Two DPLLn (DPLL0 and DPLL1) with input frequency 32KHz 
; to 3.2MHz. The ref_source can be divided to fit within the
; reference frequency with the div property.
; you must set the reference source (ref_source) to xosc0, xosc1, 
; xosc32k or GCLKn.
; The internal registers are not set by configuration rather the 
; output frequency property (out_frequency) is used to 
; calcuate those values. out_frequency is required and is in Hz.
; out_frequency must be between 96MHz and 200MHz
; In this example, xosc0 is 12MHz and divided by 6 for 2MHz. We have 
; an output frequency of 120MHz for DPLL0. 
; Fractional divisors will generate higher jitter but will be correct frequency.
; You can set integeronly = 1, to force integer divisor which is low
; jitter but may not be exactly on frequency. 

[DPLL0]
ref_source=xosc0
out_frequency=120000000
div=6

; digital frequency locked loop 
; the dfll expects < 33KHz as a reference frequency and 
; generates 48MHz. While the DFLL can operate at other
; frequencies, it is specified only for 48MHz
; see the datasheet for the settings of the other properties
; if reference source is gclk3 (32.768KHz) then
; the following code will enable DFLL as a 48MHz source.


[DFLL]
ref_source=gclk3
out_frequency=48000000
cstep=10
fstep=10
course=7
fine=128
mode=1

; generic clock outputs. 
; GCLK0 - GCLK11
; these have a reference source of XOSCn, XOSC32K, OSCULP32K, 
; DFLL, DPLLn, GCLK as an input and GCLK1
; Two GCLKs are special purpose. GCLK0 output is always to the 
; CPU and GCLK1 has a larger divider and can be used as 
; a source to other GCLKs. 
; A GCLK output is routed to any of the peripherals. 
; The output can divide the reference source frequency by 
; an integer. 
; setting CPU clock to 120MHz. We use DPLL0 for 120MHz and 
; use the following to route it to the CPU
[GCLK0]
ref_source = dpll0
div = 1

; there was an example earlier of how to use GCLK as an 
; external clock source, now we have an example to get 
; a clock output to a pin. The pin must be able to be 
; configured for that GCLK. You can use idc=1 to make the 
; clock 50/50 duty cycle and set the initial state with oov=0 or oov=1
; For example, PB12 can be used for 
; GCLK6. To get 10MHz from our 120MHz DPLL0 we use
[GCLK6]
ref_source = dpll0
div = 12
out = CLKOUT



